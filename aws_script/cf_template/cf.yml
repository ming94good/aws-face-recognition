AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Set up lab

Parameters:
    # lambda script
    ScriptBucketName: 
      Type: String
      Description: Enter the bucket name.
      AllowedPattern: ^[a-z0-9.-]+$
      Default: ming-lab-face-recognition
    FaceRecognitionLambdaScript:
      Type: String
      Description: Enter the script for FaceRecognition lambda.
      Default: lambda_script/FaceRecognition.zip
    ReadDBLambdaScript:
      Type: String
      Description: Enter the script for Read DB lambda.
      Default: lambda_script/ReadDB.zip
    FirehoseStreamLambdaScript:
      Type: String
      Description: Enter the script for Read DB lambda.
      Default: lambda_script/Firehose.zip
    # create S3 bucket
    FaceBucketName: 
      Type: String
      Description: Create a bucket with a unique name.
      AllowedPattern: ^[a-z0-9.-]+$
      ConstraintDescription: Malformed input-Parameter S3DataRepositoryBucketName must be unique and only contain lowercase letters and numbers
      Default: lab-face-collection
    # create lambda
    FaceRecognitionLambdaName:
      Type: String
      Description: Enter your lambda name here.
      Default: "Lab-FaceRecognition"
    FirehoseStreamLambdaName:
      Type: String
      Description: Enter your lambda name here.
      Default: "Lab-FirehoseTransform"
    ReadDBLambdaName:
      Type: String
      Description: Enter your lambda name here.
      Default: "Lab-ReadDB"
    # create dynamodb
    FaceIndexTableName:
      Description: 'Enter the name for face index table.'
      Type: String
      Default: lab_face_index
    FaceRecordTableName:
      Description: 'Enter the name for face record table.'
      Type: String
      Default: lab_face_record
    # create IAM role
    FaceRecognitionRoleName:
      Description: 'Enter the role name for lambda.'
      Type: String
      Default: Lab-FaceRecognition-role
    FirehoseStreamRoleName:
      Description: 'Enter the role for firehose delivery stream.'
      Type: String
      Default: Lab-firehose-role
    IoTRuleRoleName:
      Description: 'Enter the role for iot rule.'
      Type: String
      Default: Lab-iot-rule-firehose
    GlueRoleName:
      Description: 'Enter the role for glue.'
      Type: String
      Default: Lab-glue-role
    ECSRoleName:
      Description: 'Enter the role for ecs (AWS batch).'
      Type: String
      Default: Lab-ecs-batch-role
    # create firehose stream
    FirehoseStreamName:
      Description: 'Enter the name for firehose stream.'
      Type: String
      Default: Lab-FirehoseStream
    # create iot rule
    IoTRuleName:
      Description: 'Enter the name for IoT rule.'
      Type: String
      Default: LabSendFirehose
    SQLcommand:
      Description: 'Enter SQL command for IoT rule. IoT rule will subscribe the following topic name.'
      Type: String
      Default: Select * from 'face/image'
    # create rekognition collection 
    RekognitionCollectionName:
      Description: 'Enter the name for rekognition collection.'
      Type: String
      Default: Lab-face-collection
    # create api gateway
    ApiGatewayName:
      Description: 'Enter the name for api gateway.'
      Type: String
      Default: Lab-API

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "S3 Bucket Configuration"
        Parameters: 
          - ScriptBucketName
          - FaceBucketName
      - Label: 
          default: "IAM Role Configuration"
        Parameters: 
          - FaceRecognitionRoleName
          - FirehoseStreamRoleName
          - IoTRuleRoleName
          - GlueRoleName
          - ECSRoleName
      - Label: 
          default: "Lambda Configuration - Face Recognition"
        Parameters: 
          - FaceRecognitionLambdaName
          - FaceRecognitionLambdaScript
      - Label: 
          default: "Lambda Configuration - FirehoseTransform"
        Parameters: 
          - FirehoseStreamLambdaName
          - FirehoseStreamLambdaScript
      - Label: 
          default: "Lambda Configuration - ReadDB"
        Parameters: 
          - ReadDBLambdaName
          - ReadDBLambdaScript
      - Label:
          default: "DynamoDB Configuration"
        Parameters: 
          - FaceIndexTableName
          - FaceRecordTableName
      - Label:
          default: "IoT Configuration"
        Parameters: 
          - IoTRuleName
      - Label:
          default: "Firehose Configuration"
        Parameters: 
          - FirehoseStreamName
          - FirehoseStreamRoleName
      - Label:
          default: "Rekognition Configuration"
        Parameters: 
          - RekognitionCollectionName
      - Label:
          default: "API Gateway Configuration"
        Parameters: 
          - ApiGatewayName
      

Resources:
    ## IAM Role
    FaceRecognitionRole: 
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        ManagedPolicyArns: 
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'
          - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
          - 'arn:aws:iam::aws:policy/AWSBatchFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - 
            Action: sts:AssumeRole  
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
        RoleName: !Ref FaceRecognitionRoleName

    FirehoseStreamRole: 
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        ManagedPolicyArns: 
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
          - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - 
            Action: sts:AssumeRole  
            Effect: Allow
            Principal:
              Service:
                - "firehose.amazonaws.com"
        RoleName: !Ref FirehoseStreamRoleName
    
    IoTRuleRole: 
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        ManagedPolicyArns: 
          - 'arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - 
            Action: sts:AssumeRole  
            Effect: Allow
            Principal:
              Service:
                - "iot.amazonaws.com"
        RoleName: !Ref IoTRuleRoleName

    GlueRole: 
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        ManagedPolicyArns: 
          - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - 
            Action: sts:AssumeRole  
            Effect: Allow
            Principal:
              Service:
                - "glue.amazonaws.com"
        RoleName: !Ref GlueRoleName

    ECSRole: 
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        ManagedPolicyArns: 
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess'
          - 'arn:aws:iam::aws:policy/AWSBatchFullAccess'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - 
            Action: sts:AssumeRole  
            Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
        RoleName: !Ref ECSRoleName
      
    ## lambda
    FaceRecognitionLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Ref FaceRecognitionLambdaName
        Code:
          # Choose your script in a specific S3 bucket.
          S3Bucket: !Ref ScriptBucketName
          S3Key: !Ref FaceRecognitionLambdaScript
        Handler: lambda_function.lambda_handler
        Role: !GetAtt FaceRecognitionRole.Arn
        Runtime: python3.7
        Timeout: 300 
        Environment:
          Variables:
            BUCKET: !Ref FaceBucketName
            COLLECTION: !Ref RekognitionCollectionName
            FACE_TABLE: !Ref FaceIndexTableName
            STREAM_RECORD: !Ref FaceRecordTableName

    FirehoseStreamLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Ref FirehoseStreamLambdaName
        Code:
          # Choose your script in a specific S3 bucket.
          S3Bucket: !Ref ScriptBucketName
          S3Key: !Ref FirehoseStreamLambdaScript
        Handler: lambda_function.lambda_handler
        Role: !GetAtt FaceRecognitionRole.Arn
        Runtime: python3.7
        Timeout: 300
        Environment:
          Variables:
            BUCKET: !Ref FaceBucketName

    ReadDBLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Ref ReadDBLambdaName
        Code:
          # Choose your script in a specific S3 bucket.
          S3Bucket: !Ref ScriptBucketName
          S3Key: !Ref ReadDBLambdaScript
        Handler: lambda_function.lambda_handler
        Role: !GetAtt FaceRecognitionRole.Arn
        Runtime: python3.7
        Timeout: 300
        Environment:
          Variables:
            TABLE: !Ref FaceRecordTableName 

    # S3 event
    FaceDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Ref FaceBucketName
        NotificationConfiguration:
          LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
            Function: !GetAtt FaceRecognitionLambda.Arn
    SetPermissionBucket1:
      Type: AWS::Lambda::Permission
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref FaceRecognitionLambda
        Principal: s3.amazonaws.com
        SourceAccount: !Ref "AWS::AccountId"
        SourceArn: !Sub "arn:aws:s3:::${FaceBucketName}"
    # firehose setup
    FirehoseStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties: 
        DeliveryStreamName: !Ref FirehoseStreamName
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration: 
          BucketARN: !GetAtt FaceDataBucket.Arn
          BufferingHints: 
            IntervalInSeconds: 60
            SizeInMBs: 3
          # CloudWatchLoggingOptions: 
          #   Enabled: True
          #   LogGroupName: /aws/kinesisfirehose/lab
          #   LogStreamName: S3Delivery
          CompressionFormat:  UNCOMPRESSED
          ProcessingConfiguration:
            Enabled: True
            Processors:
              - Type: Lambda
                Parameters:
                  - ParameterName: LambdaArn
                    ParameterValue: !GetAtt FirehoseStreamLambda.Arn
                  # - ParameterName: BufferSizeInMBs
                  #   ParameterValue: 3
                  # - ParameterName: BufferIntervalInSeconds
                  #   ParameterValue: 60
          RoleARN: !GetAtt FirehoseStreamRole.Arn
    # iot rule setup
    IotRule:
      Type: AWS::IoT::TopicRule
      Properties: 
        RuleName: !Ref IoTRuleName
        TopicRulePayload: 
          Sql:  !Ref SQLcommand  # subscribe to topic 
          RuleDisabled: false
          Actions:
            - Firehose: 
                DeliveryStreamName: !Ref FirehoseStreamName
                RoleArn: !GetAtt IoTRuleRole.Arn

    # DynamoDB
    FaceIndexTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref FaceIndexTableName
        AttributeDefinitions:
          - AttributeName: "face_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "face_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FaceRecordTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref FaceRecordTableName
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

     ## API Gateway
    ApiGateway:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Name: !Ref ApiGatewayName
    ApiGatewayResource:
      Type: AWS::ApiGateway::Resource
      Properties: 
        ParentId: !GetAtt ApiGateway.RootResourceId
        PathPart: "lab"
        RestApiId: !Ref ApiGateway

    ApiGatewayRootMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: "NONE"
        HttpMethod: "GET"
        Integration:
          IntegrationHttpMethod: "GET"
          Type: "AWS_PROXY"
          Uri: !Sub
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
            - lambdaArn: !GetAtt ReadDBLambda.Arn
        ResourceId: !Ref ApiGatewayResource
        RestApiId: !Ref "ApiGateway"

    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        StageName: "lab"
        Description: 'lab env'
        RestApiId: !Ref "ApiGateway"
        DeploymentId: !Ref ApiGatewayDeployment
    ApiGatewayDeployment:
      Type: "AWS::ApiGateway::Deployment"
      DependsOn:
        - "ApiGatewayRootMethod"
      Properties:
        RestApiId: !Ref "ApiGateway" 